function [sp,params]=kfroot_tfspm2w(sp,cl,Q,smooth,jackknife,jazalph)
%function [sp,params]=kfroot_tfspm2w(sp,cl,Q,smooth,jackknife,jazalph)
%
% Hybrid Kalman-Fourier analysis
%
% Generalised root-transform
%
% Kalman filtering of auto-spectra with construction of cross-spectra.
%
% Input parameters
%       sp              Spectral matrix of Fourier coefficients
%       cl              Confidence limits structure for Fourier analysis
%       Q               (opt) Process noise variance (default 1e-3)
%       smooth          (opt) Smooth spectra (1=Yes 0=No(default))
%       jackknife       (opt) Jackknife variance (1=Yes 0=No(default))
%       jazalph         (opt) Alpha-rate for Jazwinski adaptive noise algorithm
%
% Output parameters
%       sp              Spectral matrix, cols: (Dim 3 represent group entities)
%                           1       Auto-spectra ch.1
%                           2       Auto-spectra ch.2
%                           3       Cross-spectra ch.1,2
%                           4       Coherence
%       params          Parameters structure
%
%function [sp,params]=kfroot_tfspm2w(sp,cl,Q,smooth,jackknife,jazalph)

% Determine data parameters
M=size(sp,3);      % Group count
fpts=size(sp,1);   % Number of frequency points
vlen=2*fpts;       % Length of state vector
root=3.6;          % Root-transform

% Determine process noise covariance (Q)
if (~exist('Q','var'))
    Q=0.1/100;     % Default value
end;
if (~exist('smooth','var'))
    smooth=logical(0);
end;
if (~exist('jackknife','var'))
    jackknife=logical(0);
end;
if (~exist('jazalph','var'))
    jazalph = [];        % No process variance correction
end;
if (~isempty(jazalph))
    error(' Alpha-rate not yet supported - root-transform not variance stabilised therefore data adaptive anyway.');
end;

% Initialise variable space
x=zeros(vlen,M);
x12=zeros(2*fpts,M);
P=zeros(vlen,M);
xp=zeros(vlen,M+1);
xp12=zeros(2*fpts,M+1);
Pp=zeros(vlen,M+1);
L=single(zeros(3*fpts,M));
w=single(zeros(3*fpts,M));
params.w=single(zeros(M,3*fpts,M));
if (jackknife)
    jk=zeros(fpts,5,M);
    jkmean=zeros(fpts,5,M);
end;

% Transform spectra
sp=double(sp);
sp(:,1,:)=(sp(:,1,:).^(1/root)); sp(:,2,:)=(sp(:,2,:).^(1/root));
sp(:,4,:)=(imag(sp(:,3,:)).^(1/root));
sp(:,3,:)=(real(sp(:,3,:)).^(1/root));
varconst=gamma(cl(1).seg_tot)*gamma(cl(1).seg_tot+2/root)/(gamma(cl(1).seg_tot+1/root)^2)-1;

% Transition matrices
theta=1;                                                            % State-transition matrix
H=1;                                                                % Process-to-measurement matrix

% Initial conditions
initL=1;     %%% VARIANCE INCORRECT FOR CHOICES OTHER THAN 1 %%%    % No. periodograms for initial estimate
initsegs=sum([cl(1:initL).seg_tot]);                                % Segments making up initial estimate
xp(:,1)=reshape(mean(sp(:,1:2,1:initL),3),vlen,1);                  % Initial 'a priori' state vector
xp12(:,1)=[mean(sp(:,3,1:initL),3); mean(sp(:,4,1:initL),3)];       % Initial 'a priori' cross-spectra (not indexed)
R=(xp(:,1).^2)*varconst;                                            % Measurement error-covariance matrix
%R=(xp(:,1).^2)/(root^2);    % Talyor series expansion
Pp(:,1)=R;                                                          % Initial 'a priori' error cov

% % First iteration (ensures correct variance, L returned)
x(:,1)=xp(:,1); x12(:,1)=xp12(:,1); P(:,1)=R;
xp(:,2)=x(:,1); xp12(:,2)=x12(:,1); Pp(:,2)=P(:,1)+Q;
L(:,1)=ones(3*fpts,1); w(:,1)=ones(3*fpts,1);
if (jackknife)
    jk(:,:,1)=zeros(fpts,5,1);      % Zero variance for single point
    %jkmean(:,:,1)=1;
end;
params.w(1,:,:)=single(w);

% Kalman filter - forward sweep
for ind=(2:M)
    % Display progress
    disp(['Running kalman filter for group ' int2str(ind) ' of ' int2str(M)]);
    % Construct state vector
    newz=reshape(sp(:,1:2,ind),vlen,1);
    % Construct measurement noise covariance (from updated spectrum)
    R=(xp(:,ind).^2)*varconst;                                          % variance of quantity
    %R=(xp(:,ind).^2)/(root^2);     % Taylor series expansion
    
%     % Evidence
%     evidence(:,ind) = exp(-((newz-xp(:,ind)).^2)./(2*R));
%     % Jazwinski algorithm (update Q)
%     enewz = (newz(1:end/2)-xp(1:end/2,ind));
%     qj = ( mean( enewz - (R(1:end/2)+P(1:end/2,ind-1)) ) ); qj(qj<0)=0;
%     Q = jazalph*Q + (1-jazalph)*qj;
%     Pp(:,ind) = P(:,ind-1)+Q;       % Update `a priori' state covar
    
    % Kalman filter auto-spectra
    [x(:,ind),P(:,ind),K,Pp(:,ind+1),xp(:,ind+1)]=kalm_filtrv(newz,Q,R,theta,H,Pp(:,ind),xp(:,ind));
    
    % Form cross-spectra from auto-spectral weights (see log book 02-05-2006)
    
    K=rand(size(K));
    
    a=K(1:end/2); b=K(end/2+1:end);                                     % Auto-spectral weights from K (a=ch.1, b=ch.2)
    newz12=reshape([sp(:,3,ind); sp(:,4,ind)],2*fpts,1);                % Cross-periodogram (new measurement)
    K12a=(a+b)./2; K12b=((1-a)+(1-b))./2;                                 % Cross-spectral gains
    x12(:,ind)=[K12a; K12a].*newz12 + [K12b; K12b].*xp12(:,ind);        % Construct cross-spectral measure
    xp12(:,ind+1)=x12(:,ind);                                           % Define next 'a priori'
    
    % Construct weight matrix to determine effective no. segments
    Ka=[K; (K(1:end/2)+K(end/2+1:end))/2];                              % Appended is cross-spec weighting
    Kb=[(1-K); ((1-K(1:end/2))+(1-K(end/2+1:end)))/2];                  %  |
    w(:,1:ind)=single([Kb(:,ones(1,ind-1)).*double(w(:,1:ind-1)) Ka]);
    if ((~smooth) | (ind==M))
        % Force cross-spectral weights to sum=1 (as not kalman filtered)
        w2=w(:,1:ind); sumw12=sum(w(2*end/3+1:end,1:ind),2);
        w2(2*end/3+1:end,1:ind)=single(double(w2(2*end/3+1:end,1:ind))./double(sumw12(:,ones(1,size(w2,2)))));
        % Determine effective no. segments (as gains sums to 1 at each step)
        L(:,ind)=single(1./sum(double(w2).^2,2));
        % Construct jackknife error estimates
        if (jackknife)
            jkw=reshape(w2(:,1:ind),fpts,3,ind); jkw=cat(2,jkw,jkw(:,3,:));
            [jk(:,:,ind),jkmean(:,:,ind)]=kfroot_jk(double(sp(:,:,1:ind)),jkw,root);
        end;
    end;
    % Keep record of weighting scheme
    params.w(ind,:,:)=single(w);
end;

% Kalman smoother - backward sweep
if (smooth)
    % Allocate memory
	xN=zeros(vlen,M);
	PN=zeros(vlen,M);
    x12N=zeros(2*fpts,M);
    % Initial conditions of smoother
    xN(:,M)=x(:,M);
    PN(:,M)=P(:,M);
    x12N(:,M)=x12(:,M);
    % Init backward weight matrix
    w2=w;
    % Recurse backward sweep
	for ind=M-1:-1:1
        % Display progress
        if (floor(ind/M*100)<progress)
            progress=floor(ind/M*100);
            disp(['Running kalman filter: ' int2str(100-progress) '% (B)']);
        end;
        % Determine backward gain and combine forward/backward state estimates
        A=P(:,ind)./Pp(:,ind+1);
        xN(:,ind)=x(:,ind)+A.*(xN(:,ind+1)-xp(:,ind+1));
        PN(:,ind)=P(:,ind)+A.*(PN(:,ind+1)-Pp(:,ind+1)).*A;
        % Construct smoothed cross-spectra from auto-spectral gains
        c=(A(1:end/2)+A(end/2+1:end))/2;
        x12N(:,ind)=x12(:,ind)+[c; c].*(x12N(:,ind+1)-xp12(:,ind+1));
        
        % Adjust effective no. segments for backward sweep
        Aa=[A; c];                                              % Appended is cross-spec weighting
        Ab=[(1-A); ((1-A(1:end/2))+(1-A(end/2+1:end)))/2];      %  |
        % Re-normalise forward weights
        wf=[w(:,1:ind) zeros(3*fpts,M-ind)];
        wsum=sum(wf,2);
        wf=single(double(wf)./double(wsum(:,ones(1,M))));
        % Normalise conditioned cross-spectral weights
        wb=w2;
        wsum12=sum(wb(2*end/3+1:end,:),2);
        wb(2*end/3+1:end,:)=single(double(wb(2*end/3+1:end,:))./double(wsum12(:,ones(1,size(wb,2)))));
        % Determine effective no. segments (normalised bwd coeffs)
        nw=double(wb).*Aa(:,ones(1,size(wb,2)))+double(wf).*Ab(:,ones(1,size(wf,2)));
        L(:,ind)=single(1./sum(nw.^2,2));
        % Update backward sweep coefficients (un-normalised bwd coeffs)
        w2=single(double(w2).*Aa(:,ones(1,size(wb,2)))+double(wf).*Ab(:,ones(1,size(wf,2))));
        % Construct jackknife error estimates
        if (jackknife)
            jkw=reshape(nw,fpts,3,M); jkw=cat(2,jkw,jkw(:,3,:));
            jk(:,:,ind)=kfroot_jk(double(sp),jkw,root);
        end;
        % Keep record of weighting scheme
        params.w(ind,:,:)=single(nw);
    end;
	x=xN; P=PN; x12=x12N; clear('xN','PN','x12N');
end;
clear('w','w2');

% Formulate frequency domain output
x12=real((x12(1:fpts,:)).^root)+i*real((x12(fpts+1:end,:)).^root);    % (complex) cross-spectrum
sp=reshape([(x(1:2*fpts,:)).^root; x12],fpts,3,M);
Psp=reshape(P,fpts,2,M);

% Calculate coherence & phase
warning off MATLAB:divideByZero
sp(:,4,:)=abs(sp(:,3,:)).^2./((sp(:,1,:)).*(sp(:,2,:)));
warning on MATLAB:divideByZero
sp(:,5,:)=angle(sp(:,3,:));

% Generate parameters structure
params.Psp=Psp;
params.L=L;
params.root=root;
if (jackknife)
    params.jk=jk; clear('jk');
    params.jkmean=jkmean; clear('jkmean');
end;
