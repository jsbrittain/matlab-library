function [sp,Psp]=kf_spm(sp,f_max,Q);
%function [sp,Psp]=kf_spm(sp,f_max,Q);
%
% Hybrid Kalman filter and Fourier based analysis
% Kalman filtering of Fourier-based coherence estimates over trials.
% Takes sp matrix as input.
%
% Reduced vector implementation returning spectral coefficients.
%
%function [sp,Psp]=kf_spm(sp,f_max,Q);

% Check sp columns
if (size(sp,2)>3)
    % Cross-spectra defined as seperate real and complex components
    sp(:,3,:)=sp(:,3,:)+i*sp(:,4,:);
    sp=sp(:,1:3,:);
end;

% Determine input parameters
M=size(s,3);
if ((nargin<2) | (f_max==0))            % Determine f_max
    f_max=size(f,1);
else
    f_first=find(sp(:,1,1)>f_max);
    if (isempty(f_first))
        f_max=size(sp,1);
    else
        f_max=f_first(1)-1;
    end;
    if (f_max==0)
        error('Specified f_max too small.');
    end;
end;
if (nargin<3)                           % Determine Q
    Q=1e-3*ones(3*f_max,1);             % Default noise covariance
else
    if (size(Q,1)==1)
        Q=Q*ones(3*f_max,1);
    end;
end;

% Initialise variable space
x=zeros(3*f_max,M);
P=zeros(3*f_max,M);

% Kalman fitering parameters and initial conditions
x(:,1)=reshape(sp(1:f_max,:,1),3*f_max,1);         % Initial estimates
Rspect=ones(f_max,1)*(0.4343^2)/cl(1).seg_tot;
R=[Rspect; Rspect; Rspect];

P(:,1)=R;                                          % State error-covariance matrix
theta=ones(4*f_max+tout*t_max,1);                  % State-transition matrix
H=ones(4*f_max+tout*t_max,1);                      % Process-to-measurement matrix

disp(['Running Kalman filter. Groups=' int2str(M)]);
for ind=2:M
    % Construct state vector
    newz=reshape(sp(1:f_max,:,ind),3*f_max,1);
    
    % Perform Kalman filter
    [x(:,ind), P(:,ind), K, Pp, xp] = kf_filtr(newz, Q, R, theta, H, Pp, xp);
end;

% Formulate frequency-domain matrix output
f=reshape(x(1:(f_max*3),:),f_max,4,M);
Pf=zeros(f_max,1,M);
Pf(:,2:5,:)=reshape(P(1:(f_max*4),:),f_max,4,M);

% Formulate time-domain matrix output
if (tout)
    t=t(1:t_max,1,:);
    t(:,2,:)=reshape(x((f_max*4+1):size(x,1),:),t_max,1,M);
    Pt=zeros(t_max,1,M);
    Pt(:,2,:)=reshape(P((f_max*4+1):size(P,1),:),t_max,1,M);
end;
