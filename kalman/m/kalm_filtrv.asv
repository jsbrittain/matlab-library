function [x, P, K, Pp, xp] = kalm_filtrv(newz, Q, R, theta, H, Pp, xp);
%function [x, P, K, Pp, xp] = kalm_filtrv(newz, Q, R, theta, H, Pp, xp);
%
%  Multivariate Kalman Filter
%  Recursive form - Reduced Vector implementation
%
%  Random process to be estimated
%    x(k+1) = theta(k)*x(k) + w(k)        // Process
%    z(k)   = H(k)*x(k) + v(k)            // Measurement
%
%  Function parameters
%    newz     observations (measurements)
%    Q        process noise covariance matrix
%    R        measurement noise covariance matrix
%    theta    state transition matrix
%    H        measurement-to-state matrix
%    Pp       'a priori' error covariance matrix
%    xp       'a priori' estimate sequence
%
%function [x, P, K, Pp, xp] = kalm_filtrv(newz, Q, R, theta, H, Pp, xp);
%

% Initial conditions
statevars=size(xp,1);
I=ones(statevars,1);

% Kalman gain
K=Pp.*H./(H.*Pp.*H+R);

K(2*end/3+1:end)=(K(1:end/3).*K(end/3+1:2*end/3));

% Update estimate with measurement
x=xp+K.*(newz-H.*xp);

% Compute error covariance for updated estimate
P=(I-K.*H).*Pp;

% Project ahead
xp=theta.*x;
Pp=theta.*P.*theta+Q;
