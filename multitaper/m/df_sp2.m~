function [DF11,DF22,DF12,params]=df_sp2(dat1,dat2,trig,offset,duration,rate,opt_str)
%function [DF11,DF22,DF12,params]=df_sp2(dat1,dat2,trig,offset,duration,rate,opt_str)
%
% Dual-frequency analysis type 2
%
% Input parameters
%   Data parameters
%       dat1        Time series 1
%       dat2        Time series 2
%       trig        Trigger
%       offset      Offset (ms)
%       duration    Duration (ms)
%       rate        Sampling rate
%   Analysis parameters
%       opt_str     Options string
%                       r<0,1,2>    rectify (none, ch1, ch1&2)
%                       W           multitaper bandwidth (default: 6, 0=none)
%                       f           maximum analysis frequency (default: Nyquist)
%
%function [DF11,DF22,DF12,params]=df_sp2(dat1,dat2,trig,offset,duration,rate,opt_str)

% Default parameters
W=6;                        % multitaper bandwidth
maxf=rate/2;                % maximum analysis frequency (Nyquist)
multitaper=logical(1);      % perform multitaper analysis

% Parse options string
options=deblank(opt_str);
opt_str='';
while (any(options))                % Parse individual options from string.
	[opt,options]=strtok(options);
	optarg=opt(2:length(opt));      % Determine option argument.
	switch (opt(1))
        case 'W'
            W=str2num(optarg);
            if (isempty(W))
                error(['Error in option argument -- W' optarg]);
            end;
            if (W==0)
                multitaper=0;
            end;
        case 'f'
            maxf=str2num(optarg);
            if (isempty(maxf))
                error(['Error in option argument -- f' optarg]);
            end;
            opt_str=[opt_str ' ' opt];
        otherwise                   % Options for segmented analysis
            opt_str=[opt_str ' ' opt];
    end;
end;

% Determine data parameters
offset=offset*rate/1000;        % Convert ms -> samples
duration=duration*rate/1000;    %
trig=round(trig);
trialcount=length(trig);

% Generate Discrete Prolate Spheroidal Sequences (DPSS)
if (multitaper)
    if (NW==0.5)
        [v,dk]=dpss(duration,W);     % 3rd part routine (Breitenberger)
        v=v(:,1); V=V(1);
    else
        [E,V]=dpss(padduration,NW);  % 3rd party routine (Breitenberger)
    end;
else
    v=ones(duration,1); dk=1;
end;
tapercount=size(v,2);

% Determine weighting scheme
dk=dk/sum(dk);

% Determine frequency range and maximum frequency
freqs=rate*[0:duration/2]/duration;
fmax=min(floor(duration/2),find(abs(freqs-maxf)==min(abs(freqs-maxf)))); % pts
%fmax=dsearchn(freqs.',maxf);
freqs=freqs(1:fmax);

% Allocate memory
DF11=zeros(fmax);
DF22=zeros(fmax);
DF12=zeros(fmax);

% Recursively form dual-frequency spectrum
for trial=1:trialcount
    % Determine time range for trial
    disp(['Dual-frequency trial ' int2str(trial) ' of ' int2str(trialcount)]);
    trange=trig(trial)+offset+[0:duration-1];
    % Perform single segment analysis
    [df11,df22,df12,params]=df_sp(dat1(trange),dat2(trange),rate,opt_str,v,dk);
    % Form recursive dual-frequency spectra
    DF11=DF11+df11/trialcount;
    DF22=DF22+df22/trialcount;
    DF12=DF12+df12/trialcount;
end;

% Modify parameters structure
params.W=W;
params.freqs=freqs;
params.fmax=maxf;
params.tapercount=tapercount;
params.trialcount=trialcount;
params.L=trialcount*params.L;
