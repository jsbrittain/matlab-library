function [W,wlparam]=wlTransform(x,dt,dj,arg1,arg2,arg3,arg4);
%function [W,wlparam]=wlTransform(x,dt,dj,[srange],opt,mother,wlopt);
%
% Wavelet transform using scale notation
%
% Parameters
%   x           Time series
%   dt          Time-resolution
%   dj          Scale-resolution
%   srange      (opt) Scale-range
%                   May be [s0 J] (gives s0*2^([0:J]*dj)) or a complete set
%   opt         Analysis options
%                   p - zero pad to power of 2
%                   l - Linear scale (srange required)
%   mother      Mother wavelet as a string
%   wlopt       Options for the mother wavelet
%               (Passed as a cell array, i.e.: {opt1,opt2,opt3,...})
%
% Mother wavelets (with options)
%   'dog'       {m(m'th derivative)}
%   'morlet'    {f0(centre frequency in rad/sec)}
%   'morse'     {beta, gamma, k(order)}
%
%function [W,wlparam]=wlTransform(x,dt,dj,[srange],opt,mother,wlopt);

% Default set all options
pad=0;
linearscale=0;

% Determine input parameters
if (nargin<7)
    s0=2*dt;
    J=-1;
    opt=arg1;
    mother=arg2;
    wlopt=arg3;
    srange=[];
else
    if ((length(arg1)>2) | (length(arg1)==1))
        % Linear scale, range provided
        linearscale=1;
        scale=arg1;
    elseif (isempty(arg1))
        % Empty srange
        s0=2*dt;
        J=-1;
    else
        % Log scale
        s0=arg1(1);
        J=arg1(2);
    end;
    srange=arg1;
    opt=arg2;
    mother=arg3;
    wlopt=arg4;
end;

% Parse options string
options=deblank(opt);
while (any(options))                % Parse individual options from string.
	[opt,options]=strtok(options);
	optarg=opt(2:length(opt));      % Determine option argument.
	switch (opt(1))
	    case 'p'            % Pad time series
        	pad=1;
    	otherwise
            error (['Illegal option -- ',opt]);
    end;
end;

% Zero pad time series
if (pad)
    padding=2^ceil(log2(length(x)))-length(x);
    x=[x; zeros(padding,1)];
else
    padding=0;
end;
N=length(x);

% Fourier transform time series
fx=fft(x);

% Determine mother wavelet
wlf_mother=['wlf_' mother];

% Determine scale range
if (~linearscale)
    % Powers of 2
	if (J==-1)
        % Use Nyquist frequency (See Torrence Eq.10)
        J=ceil((1/dj)*log2(N*dt/s0));
	end;
	j=0:J;
	scale=s0.*2.^(j*dj);
else
    J=length(scale)-1;
end;

% Determine analysis frequencies
halflength=floor(N/2);
omega=[(2*pi*(0:halflength)/(N*dt)) (-(2*pi*((halflength+1):(N-1)))/(N*dt))]';

% At each scale
W=zeros(J+1,N);
for ind=1:length(scale)
    % Compute normalised wavelet transform at scale s
    wlf=feval(wlf_mother,omega,scale(ind),dt,wlopt{:});
    W(ind,:)=ifft(fx.*conj(wlf))';
end;

% Remove any zero padding
W=W(:,1:(size(W,2)-padding));
N=N-padding;

% Obtain wavelet parameters
wlp_mother=['wlp_' mother];
[wlparam]=feval(wlp_mother,omega,scale,dt,dj,wlopt{:});

% Determine Cone-Of-Influence (COI) in terms of scale
k=0:(N/2-1);
coi=k*wlparam.coi;
if (length(coi)<(N/2))
    % Odd sample number
    midpoint=length(coi)*wlparam.coi;
    coi=dt*[coi midpoint fliplr(coi)];
else
    % Even sample number
    coi=dt*[coi fliplr(coi)];
end;

% Pass back transform options
wlparam.pad=pad;
wlparam.linearscale=linearscale;
wlparam.omega=omega;
wlparam.scale=scale;
wlparam.coi=coi;
wlparam.dt=dt;

% Return base 2 scale parameters
if (~linearscale)
    wlparam.dj=dj;
    wlparam.s0=s0;
    wlparam.J=J;
end;

% Additional default parameters
if (~isfield(wlparam,'display_coi'))
    wlparam.display_coi=logical(1);
end;
wlparam.display_scale=logical(0);
wlparam.label='';
wlparam.gabor=logical(0);
wlparam.srange=srange;
wlparam.opt=opt;
